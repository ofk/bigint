import java.math.BigInteger;

class Test2 {
	public static void main(String[] args) {
		write_gen(); System.out.println("");
		write_add(); System.out.println("");
		write_sub(); System.out.println("");
		write_mul(); System.out.println("");
		write_div(); System.out.println("");
	}

	public static void write_gen() {
		test_gen("1234567890123456789012345678901234567890", "0b", 2);
		test_gen("1234567890123456789012345678901234567890", "0o", 8);
		test_gen("1234567890123456789012345678901234567890", "0", 8);
		test_gen("1234567890123456789012345678901234567890", "0x", 16);
		test_gen("12345678901234567890123456789012345678901234567890123456789012345678901234567890", "0x", 16);
	}

	public static void write_add() {
		test_method(0, 0, 10000, "321");
		test_method(0, 1, 10000, "54321");
		test_method(0, 1, 10000, "1234567");
		test_method(0, 2, 10000, "2147483648");
		test_method(0, 10, 10000, "1234567890123456789012345678901234567890");
		test_method(0, 0, 10000, "-321");
		test_method(0, 1, 10000, "-54321");
		test_method(0, 1, 10000, "-1234567");
		test_method(0, 2, 10000, "-2147483648");
		test_method(0, 10, 10000, "-1234567890123456789012345678901234567890");
		test_method(0, 0, 10000, "662071");
		test_method(0, 1, 10000, "50059321");
		test_method(0, 1, 10000, "51239567");
		test_method(0, 2, 10000, "498647529598");
		test_method(0, 10, 10000, "10000149502684623389768952884026436728587738663340");
		test_method(0, 0, 10000, "-662071");
		test_method(0, 1, 10000, "-50059321");
		test_method(0, 1, 10000, "-51239567");
		test_method(0, 2, 10000, "-498647529598");
		test_method(0, 10, 10000, "-10000149502684623389768952884026436728587738663340");
	}

	public static void write_sub() {
		test_method(1, 0, 10000, "321");
		test_method(1, 1, 10000, "54321");
		test_method(1, 1, 10000, "1234567");
		test_method(1, 2, 10000, "2147483648");
		test_method(1, 10, 10000, "1234567890123456789012345678901234567890");
		test_method(1, 0, 10000, "-321");
		test_method(1, 1, 10000, "-54321");
		test_method(1, 1, 10000, "-1234567");
		test_method(1, 2, 10000, "-2147483648");
		test_method(1, 10, 10000, "-1234567890123456789012345678901234567890");
		test_method(1, 0, 10000, "662071");
		test_method(1, 1, 10000, "50059321");
		test_method(1, 1, 10000, "51239567");
		test_method(1, 2, 10000, "498647529598");
		test_method(1, 10, 10000, "10000149502684623389768952884026436728587738663340");
		test_method(1, 0, 10000, "-662071");
		test_method(1, 1, 10000, "-50059321");
		test_method(1, 1, 10000, "-51239567");
		test_method(1, 2, 10000, "-498647529598");
		test_method(1, 10, 10000, "-10000149502684623389768952884026436728587738663340");
	}

	public static void write_mul() {
		test_method(2, 0, 1000, "321");
		test_method(2, 1, 1000, "54321");
		test_method(2, 2, 1000, "1234567");
	}

	public static void write_div() {
		test_method(3, 0, 1000, "21733841872216923023727365039031391996580644988307406256128579314334023627924462057845457884902173176878249370652295130735077842521444921276048918062115971139317667339847634662058180310325700435611760019051953220549395418085419651815081438704899028442735461089381965291471235600484737057593351116598894032736643763462772864491099361658145602060623414869148372883354699043289800271046713781800940299432764521238322706395080135583297380198015607027261152869473348801657713008769653235928202866593065016544118496204040840766304690724764845091413603286309298190181757738326171480827852729861803229123284925306768217264275676541082402903113610022214504526114487353047271723472593371622772988036034159459542988474571157812266793464990451053697223713473031649687917653429260776732894951515949403273603694137302654617816916403172750856868523587164621347256596290312507451864070755217228522571421942350995729095472889186950543214088495833526428727326361019349771631589620802234854456077033293436097123157903704850432000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

		test_method(3, 0, 100, "123456789022345678903234567890423456789052345678906234567890723456789082345678909234567890123456789022345678903234567890423456789052345678906234567890723456789082345678909234567890");
		test_method(3, 0, 50, "333333333333333333555555555555555555777777777777777777999999999999999999111111111111111111333333333333333333555555555555555555777777777777777777999999999999999999111111111111111111");
		test_method(3, 0, 25, "888888888888444444444444000000000000666666666666222222222222888888888888444444444444000000000000666666666666222222222222");
	}

	public static void test_method(int method_type, int cnt, int len, String seed) {
		BigInteger N = new BigInteger(seed);
		for (int i = 1; i <= len; ++i) {
			String s = "";
			if (cnt == 0) {
				s += (int) Math.sqrt(i);
			}
			else {
				for (int j = 0; j < cnt; ++j) s += i;
			}
			switch (method_type) {
				case 0:
					N = N.add(new BigInteger(s));
					break;
				case 1:
					N = N.subtract(new BigInteger(s));
					break;
				case 2:
					N = N.multiply(new BigInteger(s));
					break;
				case 3:
					N = N.divide(new BigInteger(s));
					break;
			}
		}
		String method = "";
		switch (method_type) {
			case 0:
				method = "add";
				break;
			case 1:
				method = "sub";
				break;
			case 2:
				method = "mul";
				break;
			case 3:
				method = "div";
				break;
		}
		System.out.println("test_method('" + method + "', " + cnt + ", " + len + ", '" + seed + "', '" + N.toString() + "');");
	}

	public static void test_gen(String a_str, String prefix, int radix) {
		BigInteger a = new BigInteger(a_str);
		System.out.println("test_gen('" + prefix + a.toString(radix) + "', '" + a_str + "');");
	}
}
